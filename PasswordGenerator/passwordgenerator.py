import random
import time
from datetime import datetime
import requests
import subprocess
import sys

LOCAL_VERSION = "1.0.0"

############################################

def check_for_updates():
    try:
        url = "https://raw.githubusercontent.com/mkskt/password_generator/main/version.txt"
        r = requests.get(url, timeout=5)
        if r.status_code == 200:
            remote_version = r.text.strip()
            if remote_version != LOCAL_VERSION:
                print(f"New version is available: {remote_version}")
                while True:
                  chooseUpdate = input("Do you wish to update? Y/N: ").strip().lower()
                  if chooseUpdate in ('y', 'yes'):
                      print("\nWaiting for an update...")
                      time.sleep(4)
                      subprocess.Popen(['cmd', '/c', 'start', 'python', 'updater.py'])
                      sys.exit(0)
                  elif chooseUpdate in ('n', 'no'):
                      print("Skipped update\n")
                      break
                  else:
                      print("Wrong answer\n")
                      continue
            else:
                print("Program is up to date!\n")
        else:
            print(f"Could not verify version. Status: {r.status_code}")
    except Exception as e:
        print(f"Error while checking if update is available: {e}")

##############################################

import subprocess, sys

try:
    from cryptography.fernet import Fernet
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "cryptography"])
    from cryptography.fernet import Fernet

##############################################

password = []
possibleCharacters = []
userKey = ""

##############################################

def fileSaving():

	global userKey

	x = datetime.now().astimezone()

	while True:

		keyChoice = input("\n===================\n1. Generate encryption key (only if you don't have one already!)\n" \
				"2. Input your key (if you don't have one, choose option 1)\n===================\nChoose an option: ")
					
		try:
			if int(keyChoice) == 1:
					while True:
						sure = input("Are you sure? If other passwords were encrypted using a different key, acessing password list may have unwanted results Y/N: ")
						if sure.lower() in ("yes", "y"):
							userKey = Fernet.generate_key()
							print(f"\n=====Your key (save it somewhere!)=====\n{userKey.decode()}")
							print("\nChoose option 2 in the next menu and input given key")
							break
						elif sure.lower() in ("no", "n"):
							continue
						else:
							print("\nAnswer unrecognized")
							continue
			elif int(keyChoice) == 2:
					userKey = input("\nInput your key (can't be random, must be previously generated by this program)\nType 'Back' to return to the previous menu\nEnter key: ")
					if userKey.lower() == "back":
						continue
					else:
						print("Analyzing...")
						time.sleep(2)
						break

		except:
				print("\nChoose 1 or 2\n")
				continue

	refKey = Fernet(userKey)

	data = f"Your password ({str(x.day)} {x.strftime('%b')} {str(x.year)} {x.strftime('%H')}:{x.strftime('%M')}): {''.join(password)}"
	dataBytes = data.encode()

	encryptedPass = refKey.encrypt(dataBytes)

	with open("passwords.txt", "ab") as savePass:
			savePass.write(encryptedPass + b'\n')

	print("\nPassword saved to a file, to access it, choose 'Access passwords' in main menu")
	input("Press Enter...")

	return True

###############################################

def fileReading():

	global userKey
	
	while True:
		userKey = input("\nInput your key (can't be random, must be previously generated by this program): ")


		try:
			refKey = Fernet(userKey)
			break
		except:
			print("Incorrect key")
			continue

	decryptedList = []

	with open("passwords.txt", "rb") as readFile:
			for line in readFile:
					line = line.strip()
					try:
							decryptedData = refKey.decrypt(line).decode()
							decryptedList.append(decryptedData)
					except:
							print("Something went wrong. Check your key.")

	if decryptedList:
			print("\n===============Your Passwords===============")
			for d in decryptedList:
					print(d)
			print("===========================================")
	else:
			print("No passwords could be decrypted.")
################################################

def passwordCreation(passwordLength):

	global password
	password = [chr(random.choice(possibleCharacters)) for _ in range(passwordLength)]

	counter = 0

	while counter != len(password):
		for i in range(len(password)):
			password[i] = chr(random.choice(possibleCharacters))
			counter += 1

	while True:
		print(f"\n====================\nYour password: {''.join(password)}\n====================")

		while True:

			afterGenChoice = input("\n====================\n1. Shuffle characters\n2. Generate a new password\n3. Save the password to a file\n====================\nChoose an option: ")

			try:
				if int(afterGenChoice) == 1:
					random.shuffle(password)
					counter = 0
					break
				elif int(afterGenChoice) == 2:
					counter = 0
					return passwordLength
				elif int(afterGenChoice) == 3:
					fileSaving()
					return
				else:
					print("Choose a number 1-3")
					continue
			except:
				print("\nEnter a number\n")
				continue
			

#############################################################

def passwordCharacterisation():

    global password, possibleCharacters
    password = []
    possibleCharacters = []

    while True:

        mainMenu = input("\n===========Password Generator===========\n1. Generate a password\n2. Access passwords\nChoose an option: ")

        try:
            if int(mainMenu) == 2:
                fileReading()
                continue

            elif int(mainMenu) == 1:
                while True:

                    passwordLenght = input("\nInput password's length: ")

                    try:
                        if int(passwordLenght) > 0:
                            break
                        else:
                            print("Length should be a number greater than zero")
                    except:
                        print("Length should be a number")
                        continue

                while True:
                    capital = ord("A")

                    capitalLetters = input("Should there be any capital letters (A-Z)? Y/N: ")

                    if capitalLetters.lower() in ("y", "yes"):
                        for addCapital in range(26):
                            possibleCharacters.append(capital)
                            capital += 1
                        break

                    elif capitalLetters.lower() in ("n", "no"):
                        break

                    else:
                        print("Answer correctly")
                        continue

                while True:
                    lowercase = ord("a")

                    lowercaseLetters = input("Should there be any lowercase letters (a-z)? Y/N: ")

                    if lowercaseLetters.lower() in ("y", "yes"):
                        for addLowercase in range(26):
                            possibleCharacters.append(lowercase)
                            lowercase += 1
                        break

                    elif lowercaseLetters.lower() in ("n", "no"):
                        break

                    else:
                        print("Answer correctly")
                        continue

                while True:
                    numbers = ord("0")

                    numberChar = input("Should there be any numbers (0-9)? Y/N: ")

                    if numberChar.lower() in ("y", "yes"):
                        for addNumber in range(10):
                            possibleCharacters.append(numbers)
                            numbers += 1
                        break

                    elif numberChar.lower() in ("n", "no"):
                        break

                    else:
                        print("Answer correctly")
                        continue

                while True:
                    special = ord("!")

                    specialCharacters = input("Should there be any special characters (@, ! etc.)? Y/N: ")

                    if specialCharacters.lower() in ("y", "yes"):
                        for addSpecial in range(7):
                            possibleCharacters.append(special)
                            special += 1
                        break

                    elif specialCharacters.lower() in ("n", "no"):
                        break

                    else:
                        print("Answer correctly")
                        continue

                passwordLength = int(passwordLenght)

                while True:
                    returnedLength = passwordCreation(passwordLength)
                    if returnedLength:
                        passwordLength = returnedLength
                        continue
                    else:
                        break

                continue

            else:
                print("\nChoose 1 or 2")
                continue

        except:
            print("\nChoose a number")
            continue

if __name__ == "__main__":
    check_for_updates()
    passwordCharacterisation()